#include "xparameters.h"
#include "xaxidma.h"
#include "xil_printf.h"
#include "xil_cache.h"

#define DMA_DEV_ID		XPAR_AXIDMA_0_DEVICE_ID
#define DDR_BASE_ADDR	0xA0000000//XPAR_PSU_DDR_0_S_AXI_BASEADDR
#define MEM_BASE_ADDR	(DDR_BASE_ADDR + 0x1000000)

#define TX_BUFFER_BASE	(MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE	(MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH	(MEM_BASE_ADDR + 0x004FFFFF)

#define MAX_PKT_LEN		0x20
#define NUMBER_OF_TRANSFERS	10

XAxiDma AxiDma;


int CheckData() {
    u32 *TxBufferPtr = (u32 *)TX_BUFFER_BASE;
    u32 *RxBufferPtr = (u32 *)RX_BUFFER_BASE;
    u32 Index;

    for (Index = 0; Index < MAX_PKT_LEN; Index++) {
        TxBufferPtr[Index] = Index + 0xC;
        RxBufferPtr[Index] = 0;
    }

    Xil_DCacheFlushRange((UINTPTR)TxBufferPtr, MAX_PKT_LEN * sizeof(u32));

    // Send a packet
    int Status = XAxiDma_SimpleTransfer(&AxiDma, (UINTPTR)RxBufferPtr, MAX_PKT_LEN * sizeof(u32), XAXIDMA_DEVICE_TO_DMA);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    Status = XAxiDma_SimpleTransfer(&AxiDma, (UINTPTR)TxBufferPtr, MAX_PKT_LEN * sizeof(u32), XAXIDMA_DMA_TO_DEVICE);
    if (Status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    while ((XAxiDma_Busy(&AxiDma, XAXIDMA_DMA_TO_DEVICE)) || (XAxiDma_Busy(&AxiDma, XAXIDMA_DEVICE_TO_DMA))) {
        // Wait
    }

    // Invalidate the cache to receive the data
    Xil_DCacheInvalidateRange((UINTPTR)RxBufferPtr, MAX_PKT_LEN * sizeof(u32));

    for (Index = 0; Index < MAX_PKT_LEN; Index++) {
        if (RxBufferPtr[Index] != TxBufferPtr[Index]) {
            xil_printf("Data error %d: %x/%x\r\n", Index, (unsigned int)RxBufferPtr[Index], (unsigned int)TxBufferPtr[Index]);
            return XST_FAILURE;
        }
    }

    return XST_SUCCESS;
}

int main() {
    int Status;
    XAxiDma_Config *Config;
    xil_printf("init\n");

    // Initialize the XAxiDma device.
    Config = XAxiDma_LookupConfig(DMA_DEV_ID);
    if (!Config) {
        xil_printf("No config found for %d\r\n", DMA_DEV_ID);
        return XST_FAILURE;
    }

    Status = XAxiDma_CfgInitialize(&AxiDma, Config);
    if (Status != XST_SUCCESS) {
        xil_printf("Initialization failed %d\r\n", Status);
        return XST_FAILURE;
    }

    if (XAxiDma_HasSg(&AxiDma)) {
        xil_printf("Device configured as SG mode\r\n");
        return XST_FAILURE;
    }

    // Disable interrupts, we use polling mode.
    XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
    XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

    // Transmit and receive the data.
    Status = CheckData();

    if (Status != XST_SUCCESS) {
        xil_printf("Failed data check\r\n");
        return XST_FAILURE;
    }

    xil_printf("Successfully ran AXI DMA example\r\n");
    return XST_SUCCESS;
}

